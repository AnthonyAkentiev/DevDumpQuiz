<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>questions</key>
	<array>
		<dict>
			<key>Comment</key>
			<string></string>
			<key>Id</key>
			<string>304</string>
			<key>Tags</key>
			<string>Python</string>
			<key>Level</key>
			<string>2</string>
			<key>Correct Answers</key>
			<string>2</string>
			<key>answers</key>
			<array>
				<string></string>
				<string></string>
				<string></string>
				<string></string>
			</array>
			<key>a</key>
			<string></string>
			<key>q</key>
			<string></string>
		</dict>
		<dict>
			<key>Comment</key>
			<string></string>
			<key>Id</key>
			<string>303</string>
			<key>Tags</key>
			<string>Python</string>
			<key>Level</key>
			<string>2</string>
			<key>Correct Answers</key>
			<string>2</string>
			<key>answers</key>
			<array>
				<string></string>
				<string></string>
				<string></string>
				<string></string>
			</array>
			<key>a</key>
			<string></string>
			<key>q</key>
			<string></string>
		</dict>
		<dict>
			<key>Comment</key>
			<string>list comprehension</string>
			<key>Id</key>
			<string>302</string>
			<key>Tags</key>
			<string>Python</string>
			<key>Level</key>
			<string>3</string>
			<key>Correct Answers</key>
			<string>4</string>
			<key>answers</key>
			<array>
				<string>[8,10,18,36,78]</string>
				<string>[1,0,1]</string>
				<string>[8,13,36]</string>
				<string>[10, 18, 78]</string>
			</array>
			<key>a</key>
			<string>&lt;p&gt;The expression works by first taking the numbers that are at the even indices, and then filtering out all the odd numbers.&lt;/p&gt;

&lt;a href=&quot;http://www.toptal.com/python/interview-questions&quot;&gt;&lt;/a&gt;</string>
			<key>q</key>
			<string>&lt;h2&gt;What will this list comprehension output will be?&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-python”&gt;
#        0   1   2   3    4    5    6    7    8
list = [ 1 , 3 , 5 , 8 , 10 , 13 , 18 , 36 , 78 ]

[x for x in list[::2] if x%2 == 0]
&lt;/code&gt;&lt;/pre&gt;</string>
		</dict>
		<dict>
			<key>Comment</key>
			<string>lambda late binding</string>
			<key>Id</key>
			<string>301</string>
			<key>Tags</key>
			<string>Python</string>
			<key>Level</key>
			<string>4</string>
			<key>Correct Answers</key>
			<string>2</string>
			<key>answers</key>
			<array>
				<string>[1,2,4,6]</string>
				<string>[6,6,6,6]</string>
				<string>[0,2,4,6]</string>
				<string>[2,4,6,8]</string>
			</array>
			<key>a</key>
			<string>&lt;p&gt;The output of the above code will be [6, 6, 6, 6] (not [0, 2, 4, 6]).&lt;/p&gt;

&lt;p&gt;The reason for this is that Python’s closures are &lt;b&gt;late binding&lt;/b&gt;. This means that the values of variables used in closures are looked up at the time the inner function is called. So as a result, when any of the functions returned by multipliers() are called, the value of i is looked up in the surrounding scope &lt;i&gt;at that time&lt;/i&gt;. By then, regardless of which of the returned functions is called, the for loop has completed and i is left with its final value of 3. Therefore, every returned function multiplies the value it is passed by 3, so since a value of 2 is passed in the above code, they all return a value of 6 (i.e., 3 x 2).&lt;/p&gt;

&lt;a href=&quot;http://www.toptal.com/python/interview-questions&quot;&gt;&lt;/a&gt;</string>
			<key>q</key>
			<string>&lt;h2&gt;What will be the output of the code below?&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-python”&gt;
def multipliers():
    return [lambda x : i * x for i in range(4)]
    
print [m(2) for m in multipliers()]
&lt;/code&gt;&lt;/pre&gt;</string>
		</dict>
		<dict>
			<key>Comment</key>
			<string>no IndexError</string>
			<key>Id</key>
			<string>300</string>
			<key>Tags</key>
			<string>Python</string>
			<key>Level</key>
			<string>2</string>
			<key>Correct Answers</key>
			<string>1</string>
			<key>answers</key>
			<array>
				<string>Empty list - []</string>
				<string>Code will result in IndexError exception</string>
				<string>Code will result in OutOfRange exception</string>
				<string>This code will not be compiled successfully</string>
			</array>
			<key>a</key>
			<string>&lt;p&gt;The above code will output &lt;b&gt;[]&lt;/b&gt;, and will &lt;i&gt;not&lt;/i&gt; result in an &lt;b&gt;IndexError&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;As one would expect, attempting to access a member of a list using an index that exceeds the number of members (e.g., attempting to access list[10] in the list above) results in an IndexError. However, attempting to access a slice of a list at a starting index that exceeds the number of members in the list will &lt;i&gt;not&lt;/i&gt; result in an IndexError and will simply return an empty list.&lt;/p&gt;
&lt;p&gt;What makes this a particularly nasty gotcha is that it can lead to bugs that are really hard to track down since no error is raised at runtime.&lt;/p&gt;

&lt;a href=&quot;http://www.toptal.com/python/interview-questions&quot;&gt;&lt;/a&gt;</string>
			<key>q</key>
			<string>&lt;h2&gt;What will be the output of the code below?&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-python”&gt;
list = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;]
print list[10:]
&lt;/code&gt;&lt;/pre&gt;</string>
		</dict>
	</array>
</dict>
</plist>
