<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>questions</key>
	<array>
		<dict>
			<key>Comment</key>
			<string></string>
			<key>Id</key>
			<string>104</string>
			<key>Tags</key>
			<string>C/C++, Screen</string>
			<key>Level</key>
			<string>1</string>
			<key>Correct Answers</key>
			<string>2 + 3</string>
			<key>answers</key>
			<array>
				<string>1</string>
				<string>2</string>
				<string>3</string>
				<string>4</string>
			</array>
			<key>a</key>
			<string>&lt;h2&gt;Lines 2 and 3 have errors&lt;/h2&gt;</string>
			<key>q</key>
			<string>&lt;h2&gt;What lines contain errors?&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;
int main() 
{ 
  int data = 12; 
  float fSum = 1.0f; 
  int* pI = NULL; 
  float* pF = NULL; 
 
  pI = &amp;data; //1 
  pI = &amp;fSum; //2 
  pF = &amp;data; //3 
  pF = &amp;fSum; //4 

  return 0; 
}
&lt;/code&gt;&lt;/pre&gt;</string>
		</dict>
		<dict>
			<key>Comment</key>
			<string>basic types</string>
			<key>Id</key>
			<string>103</string>
			<key>Tags</key>
			<string>C/C++, Screen</string>
			<key>Level</key>
			<string>1</string>
			<key>Correct Answers</key>
			<string>1+3</string>
			<key>answers</key>
			<array>
				<string>int</string>
				<string>string</string>
				<string>float</string>
				<string>vector</string>
			</array>
			<key>a</key>
			<string>&lt;h2&gt;Basic types&lt;/h2&gt;
&lt;p&gt;The C language provides many basic types. Most of them are formed from one of the four basic arithmetic type specifiers in C (char, int, float and double), and optional specifiers (signed, unsigned, short, long).&lt;/p&gt;

&lt;h3&gt;Primitive Data Type&lt;/h3&gt;
&lt;p&gt;In computer science, primitive data type is either of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;i&gt;basic type&lt;/i&gt; is a data type provided by a programming language as a basic building block. Most languages allow more complicated composite types to be recursively constructed starting from basic types.&lt;/li&gt;
&lt;li&gt;a &lt;i&gt;built-in&lt;/i&gt; type is a data type for which the programming language provides built-in support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In most programming languages, all basic data types are built-in. In addition, many languages also provide a set of composite data types. Opinions vary as to whether a built-in type that is not basic should be considered &quot;primitive”.&lt;/p&gt;

&lt;p&gt;Depending on the language and its implementation, primitive data types may or may not have a one-to-one correspondence with objects in the computer&apos;s memory. However, one usually expects operations on basic primitive data types to be the fastest language constructs there are. Integer addition, for example, can be performed as a single machine instruction, and some processors offer specific instructions to process sequences of characters with a single instruction. In particular, the C standard mentions that &quot;a &apos;plain&apos; int object has the natural size suggested by the architecture of the execution environment&quot;. This means that int is likely to be 32 bits long on a 32-bit architecture. Basic primitive types are almost always value types.&lt;p&gt;

&lt;p&gt;Most languages do not allow the behavior or capabilities of primitive (either built-in or basic) data types to be modified by programs. Exceptions include Smalltalk, which permits all data types to be extended within a program, adding to the operations that can be performed on them or even redefining the built-in operations.&lt;/p&gt;

&lt;a href=&quot;http://en.wikipedia.org/wiki/Primitive_data_type&quot;&gt;&lt;/a&gt;</string>
			<key>q</key>
			<string>&lt;div&gt;
&lt;h2&gt;Please select only Primitive/Basic Data Types&lt;/h2&gt;
&lt;p&gt;(select many)&lt;/p&gt;
&lt;/div&gt;</string>
		</dict>
		<dict>
			<key>Comment</key>
			<string>correct pointer to function declaration</string>
			<key>Id</key>
			<string>102</string>
			<key>Tags</key>
			<string>C/C++, Screen</string>
			<key>Level</key>
			<string>4</string>
			<key>Correct Answers</key>
			<string>4</string>
			<key>answers</key>
			<array>
				<string>typedef double ()*fptr();</string>
				<string>typedef double ()*fptr()[];</string>
				<string>typedef float *()fptr();</string>
				<string>typedef int (*fptr)();</string>
			</array>
			<key>a</key>
			<string>&lt;h2&gt;Function Pointer Syntax&lt;/h2&gt;
&lt;p&gt;The syntax for declaring a function pointer might seem messy at first, but in most cases it&apos;s really quite straight-forward once you understand what&apos;s going on. Let&apos;s look at a simple example:&lt;p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;
void (*foo)(int);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, foo is a pointer to a function taking one argument, an integer, and that returns void. It&apos;s as if you&apos;re declaring a function called &quot;*foo&quot;, which takes an int and returns void; now, if *foo is a function, then foo must be a pointer to a function. (Similarly, a declaration like int *x can be read as *x is an int, so x must be a pointer to an int.)&lt;/p&gt;

&lt;p&gt;The key to writing the declaration for a function pointer is that you&apos;re just writing out the declaration of a function but with (*func_name) where you&apos;d normally just put func_name.&lt;/p&gt;

&lt;h3&gt;Reading Function Pointer Declarations&lt;/h3&gt;

&lt;p&gt;Sometimes people get confused when more stars are thrown in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;
void *(*foo)(int *);
&lt;/code&gt;&lt;/pre&gt;

&lt;p?Here, the key is to read inside-out; notice that the innermost element of the expression is *foo, and that otherwise it looks like a normal function declaration. *foo should refer to a function that returns a void * and takes an int *. Consequently, foo is a pointer to just such a function.&lt;/p&gt;

&lt;a href=&quot;http://www.cprogramming.com/tutorial/function-pointers.html&quot;&gt;Source&lt;/a&gt;</string>
			<key>q</key>
			<string>&lt;div&gt;
&lt;h2&gt;Please select correct definitions&lt;/h2&gt;
&lt;p&gt;(select many)&lt;/p&gt;
&lt;/div&gt;</string>
		</dict>
		<dict>
			<key>Comment</key>
			<string>static members of class</string>
			<key>Id</key>
			<string>101</string>
			<key>Tags</key>
			<string>C/C++, Screen</string>
			<key>Level</key>
			<string>1</string>
			<key>Correct Answers</key>
			<string>4</string>
			<key>answers</key>
			<array>
				<string>All such static members will continue to live until last object of that class exists</string>
				<string>These members are destroyed and memory is deallocated</string>
				<string>These members get initial values set</string>
				<string>These members continue to exist even if all objects of that class are freed</string>
			</array>
			<key>a</key>
			<string>&lt;p&gt;Static members of that class will continue to exist even if all objects of that class are freed (destructed, released, out of scope…)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;
class StarDestroyer {
public:
	static Button m_selfDestructionButton;
	static int m_destroyedStarsCount;
};

// Do not forget to init these members later in cpp file
Button StarDestroyer::m_selfDestructionButton();
int StartDestroyer::m_destroyedStarsCount = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can define class members static using &lt;b&gt;static&lt;/b&gt; keyword. When we declare a member of a class as static it means no matter how many objects of the class are created, there is only one copy of the static member.&lt;/p&gt;

&lt;p&gt;A static member is shared by all objects of the class. All static data is initialized to zero when the first object is created, if no other initialization is present. We can&apos;t put it in the class definition but it can be initialized outside the class as done in the following example by redeclaring the static variable, using the scope resolution operator &lt;b&gt;::&lt;/b&gt; to identify which class it belongs to.&lt;p&gt;

&lt;a href=&quot;http://www.tutorialspoint.com/cplusplus/cpp_static_members.htm&quot;&gt;Source&lt;/a&gt;</string>
			<key>q</key>
			<string>&lt;div&gt;
&lt;h2&gt;What happens to static members of a class after it’s object is destructed?&lt;/h2&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;
class StarDestroyer {
public:
	static Button m_selfDestructionButton;
	static int m_destroyedStarsCount;
};
&lt;/code&gt;&lt;/pre&gt;</string>
		</dict>
		<dict>
			<key>Comment</key>
			<string>stdafx.h</string>
			<key>Id</key>
			<string>100</string>
			<key>Tags</key>
			<string>C/C++, Screen</string>
			<key>Level</key>
			<string>1</string>
			<key>Correct Answers</key>
			<string>1+4</string>
			<key>answers</key>
			<array>
				<string>By reference</string>
				<string>By name</string>
				<string>By pointer</string>
				<string>By value</string>
			</array>
			<key>a</key>
			<string>&lt;div&gt;
    &lt;h2&gt;There are 2 ways to pass an argument to function in C/C++&lt;/h2&gt;
    &lt;p&gt;1. By value&lt;/p&gt;
    &lt;p&gt;2. By reference&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;Passing arguments by reference&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;
#include &lt;iostream&gt;
using namespace std;

// this function can change values of a, b, c
void duplicate (int&amp; a, int&amp; b, int&amp; c)
{
  a*=2;
  b*=2;
  c*=2;
}

int main ()
{
  int x=1, y=3, z=7;
  duplicate (x, y, z);
 
  // Output will be:
  // x=2, y=6, z=14
  //
  cout &lt;&lt; &quot;x=&quot; &lt;&lt; x &lt;&lt; &quot;, y=&quot; &lt;&lt; y &lt;&lt; &quot;, z=&quot; &lt;&lt; z;
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Passing arguments by value&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;
// Each string will be copied
std::string concatenate(std::string a, std::string b)
{
  return a+b;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;a href=&quot;http://www.cplusplus.com/doc/tutorial/functions/&quot;&gt;Source&lt;/a&gt;</string>
			<key>q</key>
			<string>&lt;div&gt;
    &lt;h2&gt;How can we pass arguments to function in C/C++?&lt;/h2&gt;
    &lt;p&gt;(Select many)&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;
int functionOne(int param1, int param2){
	return param1 + param2;
}
&lt;/code&gt;&lt;/pre&gt;</string>
		</dict>
	</array>
</dict>
</plist>
